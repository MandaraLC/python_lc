docker的常用命令：

1.查看所有容器：
docker ps -a #显示所有的容器，包括未运行的
docker ps -l #显示最近创建的容器
docker ps -n 5 #列出最近创建的5个容器信息

2.查看本地镜像列表：
docker images

3.拉取镜像(从镜像仓库中拉取或者更新指定镜像)
docker pull java (从Docker Hub下载java最新版镜像)

4.删除镜像(-f 强制)
docker rmi -f ef_nfcs_img:latest

5.删除容器
docker rm 容器名称
docker rm $(docker ps -a -q)  #删除所有已经停止的容器

6.将本地的镜像上传到镜像仓库,要先登陆到镜像仓库
docker push myapache:v1  #上传本地镜像myapache:v1到镜像仓库中

7.使用 Dockerfile 创建镜像
docker build
--tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。

docker build -t runoob/ubuntu:v1 .  #使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1
docker build -f /path/to/a/Dockerfile .   #-f 指定Dockerfile的路径


8.Dockerfile #Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。
例子：
FROM nginx
RUN echo '这是一个本地构建的nginx镜像' > /usr/share/nginx/html/index.html

说明：
FROM：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。
RUN：用于执行后面跟着的命令行命令，有以下俩种格式：
(1)shell 格式:
RUN <命令行命令>  #<命令行命令> 等同于，在终端操作的 shell 命令。
(2)exec 格式:
RUN ["可执行文件", "参数1", "参数2"]  #RUN ["./test.php", "dev", "offline"] 等价于 RUN ./test.php dev offline

指令详解：
COPY #复制指令，从上下文目录中复制文件或者目录到容器里指定路径
COPY [--chown=<user>:<group>] <源路径1>...  <目标路径>
<源路径>：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则
<目标路径>：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建

ADD 指令和 COPY 的使用格类似（同样需求下，官方推荐使用 COPY）

CMD 
类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:
CMD 在docker run 时运行。
RUN 是在 docker build。


9.创建一个新的容器并运行一个命令
docker run
docker run --name mynginx -d nginx:latest   #--name 指定容器名称  -d 后台运行容器，并返回容器长ID

#使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。
docker run --name mynginx -d nginx:latest

#使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。
docker run -P -d nginx:latest

#使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。
docker run -p 80:80 -v /data:/data -d nginx:latest

#绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。
$ docker run -p 127.0.0.1:80:8080/tcp ubuntu bash

#使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。
runoob@runoob:~$ docker run -it nginx:latest /bin/bash
root@b8573233d675:/# 

10.停止容器的运行
docker start :启动一个或多个已经被停止的容器
docker stop :停止一个运行中的容器
docker restart :重启容器

11.进入一个已经运行的容器
docker exec -it 775c7c9ee1e1 /bin/bash  



docker run -p 8760:8760 -d nginx:latest
docker run -it -p 8760:8760 --name cosco_test -d cosco_img:latest

docker run -it -p 8760:8760 --name cosco_test -d cosco_img:latest


#创建镜像
docker build -t maersk-and-cosco:v1.0.0 .
#运行
docker run -it -p 8760:8760 --rm --name cosco_yl  -v "/root/gobuy_cosco/code/:/data"  --shm-size="2g"  yl_cosco_img:0.1.13
docker run -it -p 8760:8760 --rm --name cosco_yl  -v "/root/gobuy_cosco/code/:/data"  --shm-size="2g"  yl_cosco_img:0.1.13 sh

docker run -it -p 8760:8760 --rm --name docker_yl_maersk_cosco -v "/home/liucheng/code/:/data" --shm-size="2g" yl_cosco_maersk:1.0.0 sh
docker run -it -p 8760:8760 --rm --name docker_yl_maersk_cosco -v "/home/liucheng/code/:/data" --shm-size="2g" -d yl_cosco_maersk:1.0.2 sh start.sh
sh start.sh

docker run -it -p 8760:8760 --rm --name docker_yl_maersk_cosco8760 -v "/home/liucheng/code/:/data" --shm-size="2g" -d yl_cosco_maersk:1.0.2 sh start.sh



******上传镜像docker hub*******
1.docker ps -a #查看容器 得到container id

2.docker login #登录docker 输入账号密码

3.docker commit -m "python爬虫_船运公司订舱" -a "liucheng" 6ba61940c039 liuchengelse/prokect:python_spider_boat
#docker commit -m "提交信息" -a "作者" 容器id 仓库名称:标签

4.docker push liuchengelse/project:v1.0.0

******The End*******




















