[uwsgi]

# 运行用户名
uid=http

# 运行用户组
gid=http

# Nginx配置中uwsgi_pass应指向uWSGI服务器IP和端口
socket = scrape_web:8080

# 设置工作目录
chdir = /data/scrape_web/

# wsgi文件位置
module = scrape_web.wsgi:application

#加载指定的python WSGI模块（模块路径必须在PYTHONPATH里）
#home = /data/python_venv/Ingram_web/

# 主进程
master = True

# 同时进行的进程数
processes = 1

#允许用内嵌的语言启动线程。
enable-threads = true

# 进程文件
pidfile = /var/run/uwsgi.pid

#日志文件
logto=/var/log/uwsgi/uwsgi.log

#不记录请求信息的日志，只记录错误以及uWSGI内部消息到日志中
disable-logging = true

# 以后台守护进程运行，并将log日志存于temp文件夹。
#daemonize = /var/log/uwsgi.log

# 服务停止时，自动移除unix socket和pid文件
vacuum = True

# 为每个工作进程设置请求数的上限。当处理的请求总数超过这个量，进程回收重启。
max-requests = 5000

# 当一个请求花费的时间超过这个时间，那么这个请求都会被丢弃。
harakiri = 60

#当一个请求被harakiri杀掉会输出一条日志
harakiri-verbose = true

# uWsgi默认的buffersize为4096，如果请求数据超过这个量会报错。这里设置为64k
buffer-size = 65536

# 如果http请求体的大小超过指定的限制，打开http body缓冲，这里为64k
post-buffering = 65536

#开启内存使用情况报告
memory-report = true

#设置平滑的重启（直到处理完接收到的请求）的长等待时间(秒)
reload-mercy = 10

#设置工作进程使用虚拟内存超过多少MB就回收重启
reload-on-as = 1024

#物理内存占用超过多少MB的时候重启进程
reload-on-rss = 1024

#限制uwsgi进程占用虚拟内存的最大值
limit-as = 512

#代码改动时立即生效
py-autoreload = 1